Sentence,Return,Area,Stage
|>,,1,1
if,,1,1
defmodule,,1,1
to_string,,1,1
&&,,1,1
alias,,1,1
is_list,,1,1
round,,1,1
rem,,1,1
length,,1,1
"""elixir"" |> IO.puts()","""elixir""",1,2
"if (2 + 3) == 5, do: ""correct""","""correct""",1,2
"defmodule hello(), do: ""Hello""","""Hello""",1,2
to_string(:phoenix),"""phoenix""",1,2
2 + 3 == 5 && 9 / 3 == 3,true,1,2
"alias Greetings.Hello, as: Message",,1,2
"is_list([""elixir"", ""phoenix""])",true,1,2
round(2.4),2,1,2
"rem(19, 4)",3,1,2
"length([""typing"", ""program""])",2,1,2
each,,2,1
chunk_every,,2,1
map,,2,1
reverse,,2,1
filter,,2,1
drop,,2,1
join,,2,1
uniq,,2,1
split,,2,1
reduce,,2,1
"Enum.each([""Phoenix"", ""Framework""], fn x -> IO.puts(x) end)","""Phoenix"", ""Framework""",2,2
"Enum.chunk_every([1, 2, 3, 4, 5, 6], 2)","[[1, 2], [3, 4], [5, 6]]",2,2
"Enum.map([1, 2, 3], fn x -> x * 2 end)","[2, 4, 6]",2,2
"Enum.reverse([1, 2, 3])","[3, 2, 1]",2,2
"Enum.filter([1, 2, 3], fn x -> rem(x, 2) == 0 end)",[2],2,2
"Enum.drop([1, 2, 3], 2)",[3],2,2
"Enum.join([1, 2, 3], "" = "")","""1 = 2 = 3""",2,2
"Enum.uniq([1, 2, 3, 3, 2, 1])","[1, 2, 3]",2,2
"Enum.split([1, 2, 3], 2)","{[1, 2], [3]}",2,2
"Enum.reduce([1, 2, 3, 4], fn x, acc -> x * acc end)",24,2,2
at,,3,1
downcase,,3,1
last,,3,1
length,,3,1
replace,,3,1
reverse,,3,1
slice,,3,1
split,,3,1
to_integer,,3,1
valid?,,3,1
"String.at(""elixir"", 0)","""e""",3,2
"String.downcase(""123 XPTO"")","""123 xpto""",3,2
"String.last("""")",nil,3,2
"String.length(""tnqlh"")",5,3,2
"String.replace(""f, j, q"", "","", ""-"")","""f-j-q""",3,2
"String.reverse(""hello world"")","""dlrow olleh""",3,2
"String.slice(""elixir"", -4..-1)","""ixir""",3,2
"String.split(""abc"", """", trim: true)","[""a"", ""b"", ""c""]",3,2
"String.to_integer(""889"")",889,3,2
String.valid?(<<0xFFFF::16>>),false,3,2
[head | tail],,4,1
delete,,4,1
hd,,4,1
flatten,,4,1
insert_at,,4,1
keysort,,4,1
replace_at,,4,1
to_tuple,,4,1
zip,,4,1
to_list,,4,1
"[1, 5] ++ [4, 6]","[1, 5, 4, 6]",4,2
"List.delete([:a, :b, :b, :c], :b)","[:a, :b, :c]",4,2
"hd([9, 8, 7])",9,4,2
"List.flatten([1, [[2], 3]])","[1, 2, 3]",4,2
"List.insert_at([1, 2, 3], 10, 0)","[1, 2, 3, 0]",4,2
"List.keysort([a: 5, c: 1, b: 3], 0)","[a: 5, b: 3, c: 1]",4,2
"List.replace_at([1, 2, 3], -1, 0)","[1, 2, 0]",4,2
"List.to_tuple([:share, [:elixir, 163]])","{:share, [:elixir, 163]}",4,2
"List.zip([[1, 2], [3, 4]])","[{1, 3}, {2, 4}]",4,2
"Tuple.to_list({:foo, :bar})","[:foo, :bar]",4,2